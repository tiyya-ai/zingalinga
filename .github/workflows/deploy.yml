name: 🚀 Auto Deploy to VPS - Zinga Linga

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

jobs:
  deploy:
    name: 🌐 Deploy to Production VPS
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        echo "✅ Dependencies installed successfully"

    - name: 🏗️ Build Application
      run: |
        npm run build
        echo "✅ Application built successfully"
        
    - name: 📋 Verify Build
      run: |
        if [ -d ".next" ]; then
          echo "✅ Build directory exists"
          ls -la .next/
        else
          echo "❌ Build failed - .next directory not found"
          exit 1
        fi

    - name: 🗜️ Create Deployment Package
      run: |
        echo "📦 Creating deployment package..."
        tar --exclude='node_modules' \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='*.log' \
            --exclude='deployment-progress.json' \
            -czf zinga-linga-deploy.tar.gz \
            .next package.json package-lock.json public src next.config.js tailwind.config.js postcss.config.js tsconfig.json
        echo "✅ Deployment package created: $(ls -lh zinga-linga-deploy.tar.gz)"

    - name: 🔐 Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        echo "✅ SSH key configured"

    - name: ⬆️ Upload to VPS
      run: |
        echo "📤 Uploading deployment package to VPS..."
        scp -i ~/.ssh/id_rsa zinga-linga-deploy.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
        echo "✅ Upload completed"

    - name: 🚀 Deploy on VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          set -e
          
          echo "🚀 Starting deployment process..."
          
          # Create backup of current deployment
          if [ -d "/var/www/zinga-linga" ]; then
            echo "📋 Creating backup..."
            sudo cp -r /var/www/zinga-linga /var/www/zinga-linga-backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create application directory
          echo "📁 Setting up application directory..."
          sudo mkdir -p /var/www/zinga-linga
          cd /var/www/zinga-linga
          
          # Stop current application
          echo "⏹️ Stopping current application..."
          sudo pm2 stop zinga-linga || echo "Application not running"
          
          # Clear old files (keep node_modules for faster deployment)
          echo "🧹 Cleaning old files..."
          sudo rm -rf .next public src package.json package-lock.json *.config.js tsconfig.json
          
          # Extract new deployment
          echo "📦 Extracting new deployment..."
          sudo tar -xzf /tmp/zinga-linga-deploy.tar.gz
          
          # Set proper permissions
          echo "🔐 Setting permissions..."
          sudo chown -R $USER:$USER /var/www/zinga-linga
          
          # Install/update dependencies
          echo "📦 Installing dependencies..."
          npm install --production --no-audit --no-fund
          
          # Start application with PM2
          echo "🚀 Starting application..."
          pm2 start npm --name "zinga-linga" -- start || pm2 restart zinga-linga
          pm2 save
          
          # Verify deployment
          echo "✅ Verifying deployment..."
          sleep 5
          if pm2 list | grep -q "zinga-linga.*online"; then
            echo "✅ Application is running successfully!"
          else
            echo "❌ Application failed to start"
            pm2 logs zinga-linga --lines 20
            exit 1
          fi
          
          # Test application response
          echo "🌐 Testing application response..."
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Application is responding correctly!"
          else
            echo "⚠️ Application may not be responding on port 3000"
          fi
          
          # Cleanup
          echo "🧹 Cleaning up..."
          rm -f /tmp/zinga-linga-deploy.tar.gz
          
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Your application is available at: http://zingalinga.io"

    - name: 🔄 Restart NGINX (if configured)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          if systemctl is-active --quiet nginx; then
            echo "🔄 Restarting NGINX..."
            sudo systemctl reload nginx
            echo "✅ NGINX reloaded successfully"
          else
            echo "ℹ️ NGINX is not running or not installed"
          fi

    - name: 📊 Deployment Summary
      run: |
        echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Status**: Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **URL**: http://zingalinga.io" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "👤 **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Visit [zingalinga.io](http://zingalinga.io) to verify deployment" >> $GITHUB_STEP_SUMMARY
        echo "- Check application logs if needed: \`pm2 logs zinga-linga\`" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor application performance" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Send Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: 📢 Deployment Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deployment to zingalinga.io completed successfully!"
        else
          echo "❌ Deployment failed. Please check the logs."
        fi